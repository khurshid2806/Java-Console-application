import java.util.ArrayList;
import java.util.Scanner;

class BankAccount {
    private String accountNumber;
    private String accountHolder;
    private double balance;

    public BankAccount(String accountNumber, String accountHolder) {
        this.accountNumber = accountNumber;
        this.accountHolder = accountHolder;
        this.balance = 0;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public String getAccountHolder() {
        return accountHolder;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.printf("₹%.2f deposited successfully!\n", amount);
        } else {
            System.out.println("Invalid deposit amount!");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0) {
            if (amount <= balance) {
                balance -= amount;
                System.out.printf("₹%.2f withdrawn successfully!\n", amount);
                return true;
            } else {
                System.out.println("Insufficient balance!");
                return false;
            }
        } else {
            System.out.println("Invalid withdrawal amount!");
            return false;
        }
    }

    public void displayAccountDetails() {
        System.out.println("Account Number : " + accountNumber);
        System.out.println("Account Holder : " + accountHolder);
        System.out.printf("Current Balance : ₹%.2f\n", balance);
    }
}

public class SuperBank {
    static Scanner sc = new Scanner(System.in);
    static ArrayList<BankAccount> accounts = new ArrayList<>();

    public static void main(String[] args) {
        while (true) {
            System.out.println("\n--- SUPER BANK SYSTEM ---");
            System.out.println("1. Create Account");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Transfer Funds");
            System.out.println("5. Check Balance");
            System.out.println("6. View All Accounts");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            
            int choice = getValidChoice();

            switch (choice) {
                case 1 -> createAccount();
                case 2 -> handleDeposit();
                case 3 -> handleWithdrawal();
                case 4 -> handleTransfer();
                case 5 -> handleCheckBalance();
                case 6 -> displayAllAccounts();
                case 7 -> exitSystem();
                default -> System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    // Create a new account
    static void createAccount() {
        System.out.print("Enter Account Number: ");
        String accountNumber = sc.nextLine();
        if (findAccount(accountNumber) != null) {
            System.out.println("Account number already exists!");
            return;
        }
        System.out.print("Enter Account Holder's Name: ");
        String accountHolder = sc.nextLine();
        accounts.add(new BankAccount(accountNumber, accountHolder));
        System.out.println("Account created successfully!");
    }

    // Deposit funds
    static void handleDeposit() {
        BankAccount account = getAccount();
        if (account != null) {
            System.out.print("Enter deposit amount: ₹");
            double amount = getValidAmount();
            account.deposit(amount);
        }
    }

    // Withdraw funds
    static void handleWithdrawal() {
        BankAccount account = getAccount();
        if (account != null) {
            System.out.print("Enter withdrawal amount: ₹");
            double amount = getValidAmount();
            account.withdraw(amount);
        }
    }

    // Transfer funds between accounts
    static void handleTransfer() {
        System.out.print("Enter source account number: ");
        BankAccount sourceAccount = getAccount();
        if (sourceAccount == null) return;

        System.out.print("Enter destination account number: ");
        BankAccount destinationAccount = getAccount();
        if (destinationAccount == null) return;

        if (sourceAccount == destinationAccount) {
            System.out.println("Cannot transfer to the same account!");
            return;
        }

        System.out.print("Enter transfer amount: ₹");
        double amount = getValidAmount();

        if (sourceAccount.withdraw(amount)) {
            destinationAccount.deposit(amount);
            System.out.printf("₹%.2f transferred successfully!\n", amount);
        }
    }

    // Check account balance
    static void handleCheckBalance() {
        BankAccount account = getAccount();
        if (account != null) {
            account.displayAccountDetails();
        }
    }

    // Display all accounts
    static void displayAllAccounts() {
        if (accounts.isEmpty()) {
            System.out.println("\nNo accounts available.");
            return;
        }
        System.out.println("\n--- All Accounts ---");
        for (BankAccount account : accounts) {
            account.displayAccountDetails();
            System.out.println("-------------------------");
        }
    }

    // Get a valid account based on user input
    static BankAccount getAccount() {
        System.out.print("Enter Account Number: ");
        String accountNumber = sc.nextLine();
        BankAccount account = findAccount(accountNumber);
        if (account == null) {
            System.out.println("Account not found!");
            return null;
        }
        return account;
    }

    // Find an account by account number
    static BankAccount findAccount(String accountNumber) {
        for (BankAccount account : accounts) {
            if (account.getAccountNumber().equals(accountNumber)) {
                return account;
            }
        }
        return null;
    }

    // Get a valid integer choice from user
    static int getValidChoice() {
        while (true) {
            if (sc.hasNextInt()) {
                int choice = sc.nextInt();
                sc.nextLine(); // Consume newline
                return choice;
            } else {
                System.out.println("Invalid input! Please enter a valid number.");
                sc.next(); // Clear invalid input
            }
        }
    }

    // Get a valid positive amount from user
    static double getValidAmount() {
        while (true) {
            if (sc.hasNextDouble()) {
                double amount = sc.nextDouble();
                sc.nextLine(); // Consume newline
                if (amount > 0) {
                    return amount;
                } else {
                    System.out.println("Amount must be positive! Try again.");
                }
            } else {
                System.out.println("Invalid input! Please enter a valid amount.");
                sc.next(); // Clear invalid input
            }
        }
    }

    // Exit system gracefully
    static void exitSystem() {
        System.out.println("Thank you for using Super Bank! Goodbye!");
        System.exit(0);
    }
}
